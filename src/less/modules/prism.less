//
// Variables
//

@prism-comment: slategray;
@prism-punctuation: #999;
@prism-property: #905;
@prism-selector: #690;
@prism-operator: #a67f59;
@prism-atrule: #07a;
@prism-function: #dd4a68;
@prism-regex: #e90;

//
// Component
//

code[class*="language-"],
pre[class*="language-"] {
  color: @base-body-color;
  font-family: @base-code-font-family;
  text-align: left;
  white-space: pre;
  word-spacing: normal;
  word-break: normal;
  word-wrap: normal;
  line-height: @global-line-height-base;
  tab-size: 4;
  hyphens: none;
}

/* Code blocks */
pre[class*="language-"] {
  padding: @base-pre-padding;
  overflow: auto;
}

/* Inline code */
:not(pre) > code[class*="language-"] {
  white-space: normal;
}

.token.comment,
.token.prolog,
.token.doctype,
.token.cdata {
  color: @prism-comment;
}

.token.punctuation {
  color: @prism-punctuation;
}

.namespace {
  opacity: 0.7;
}

.token.property,
.token.tag,
.token.boolean,
.token.number,
.token.constant,
.token.symbol,
.token.deleted {
  color: @prism-property;
}

.token.selector,
.token.attr-name,
.token.string,
.token.char,
.token.builtin,
.token.inserted {
  color: @prism-selector;
}

.token.operator,
.token.entity,
.token.url,
.language-css .token.string,
.style .token.string {
  color: @prism-operator;
}

.token.atrule,
.token.attr-value,
.token.keyword {
  color: @prism-atrule;
}

.token.function {
  color: @prism-function;
}

.token.regex,
.token.important,
.token.variable {
  color: @prism-regex;
}

.token.important,
.token.bold {
  font-weight: @global-font-weight-bold;
}

.token.italic {
  font-style: italic;
}

.token.entity {
  cursor: help;
}

pre.line-numbers {
  position: relative;
  padding-left: 3.8em;
  counter-reset: linenumber;
}

pre.line-numbers > code {
  position: relative;
}

.line-numbers .line-numbers-rows {
  position: absolute;
  pointer-events: none;
  top: 0;
  font-size: 100%;
  left: -3.8em;
  width: 3em; /* works for line-numbers below 1000 lines */
  letter-spacing: -1px;
  border-right: 1px solid @global-font-color-muted;
  user-select: none;
}

.line-numbers-rows > span {
  pointer-events: none;
  display: block;
  counter-increment: linenumber;
}

.line-numbers-rows > span::before {
  content: counter(linenumber);
  color: @global-font-color-muted;
  display: block;
  padding-right: 0.8em;
  text-align: right;
}
