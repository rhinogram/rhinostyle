class ComponentExample extends React.Component {
  state = {
    firstName: '',
    lastName: '',
  }

  onClick = () => {
    CoverSystem.addCover(this.renderContent());
  };

  closeCover = () => {
    CoverSystem.removeCover();
  }

  handleChange = (name, value) => {
    const newState = {};

    newState[name] = value;
    this.setState(newState);
  }

  saveChanges = () => {
    const errors = {};

    if (!this.state.firstName) {
      errors.firstName = 'FirstName is required!';
    }

    if (!this.state.lastName) {
      errors.lastName = 'LastName is required!';
    }

    const errorCount  = Object.keys(errors).length

    if (errorCount > 0) {
      CoverSystem.refreshCover(this.renderContent(errors));
    } else {
      alert('Changes were saved!');
      this.closeCover();
    }
  }

  renderContent = (errors) => {
    const errorList = errors || {};

    return (
      <Cover>
        <CoverHeader icon="pencil" title="This is a sample Cover" />
        <CoverBody>
          <div className="form">
            <Input label="First Name" name="firstName" initialValue={this.state.firstName} validationMessage={errorList.firstName} required onChange={this.handleChange} />
            <Input label="Last Name" name="lastName" initialValue={this.state.lastName} validationMessage={errorList.lastName} required onChange={this.handleChange} />
          </div>
        </CoverBody>
        <CoverFooter>
          <UtilityInlineGrid align="right">
            <Button type="default" onClick={this.closeCover}>Close</Button>&nbsp;
            <Button type="secondary" onClick={this.saveChanges}>Save Changes</Button>
          </UtilityInlineGrid>
        </CoverFooter>
      </Cover>
    );
  }

  render() {
    return (
      <div>
        <Button type="primary" onClick={this.onClick}>Launch Cover</Button>
      </div>
    );
  }
}

ReactDOM.render(<ComponentExample />, mountNode);
