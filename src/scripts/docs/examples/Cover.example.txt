class ComponentExample extends React.Component {
  static initialState = {
    firstName: '',
    lastName: '',
    errors: {},
    open: false,
  };

  state = ComponentExample.initialState;

  onClick = () => {
    this.setState({
      open: true,
    });
  };

  closeCover = () => {
    this.setState({
      open: false,
    });
  }

  handleChange = (name, value) => {
    const newState = {};

    newState[name] = value;
    this.setState(newState);
  }

  /**
   * Reset state when `<Cover />` is closed
   * @return {func}
   */
  resetState = () => {
    this.setState(ComponentExample.initialState);
  }

  saveChanges = () => {
    const errors = {};

    if (!this.state.firstName) {
      errors.firstName = 'FirstName is required!';
    }

    if (!this.state.lastName) {
      errors.lastName = 'LastName is required!';
    }

    const errorCount  = Object.keys(errors).length;

    if (errorCount > 0) {
      this.setState({
        errors,
      });
    } else {
      this.closeCover();
    }
  }

  render() {
    const errorList = this.state.errors || {};

    return (
      <div>
        <Button type="primary" onClick={this.onClick}>Launch Cover</Button>

        <Cover onReverseComplete={this.resetState} open={this.state.open}>
          <CoverHeader onClose={this.closeCover} icon="pencil" title="This is a sample Cover" />
          <CoverBody>
            <div className="form">
              <Input label="First Name" name="firstName" initialValue={this.state.firstName} validationMessage={errorList.firstName} required onChange={this.handleChange} />
              <Input label="Last Name" name="lastName" initialValue={this.state.lastName} validationMessage={errorList.lastName} required onChange={this.handleChange} />
            </div>
          </CoverBody>
          <CoverFooter>
            <UtilityInlineGrid align="right">
              <Button type="default" onClick={this.closeCover}>Close</Button>&nbsp;
              <Button type="secondary" onClick={this.saveChanges}>Save Changes</Button>
            </UtilityInlineGrid>
          </CoverFooter>
        </Cover>
      </div>
    );
  }
}

ReactDOM.render(<ComponentExample />, mountNode);
