class ComponentExample extends React.Component {
  state = {
    firstName: '',
    lastName: '',
    errors: {},
    open: false,
  };

  onClick = () => {
    this.setState({
      open: true,
    });
  };

  closeModal = () => {
    this.setState({
      open: false,
    });
  }

  handleChange = (name, value) => {
    const newState = {};

    newState[name] = value;
    this.setState(newState);
  }

  /**
   * Reset state when `<Modal />` is closed
   * @return {func}
   */
  resetSet = () => {
    this.setState({
      firstName: '',
      lastName: '',
      errors: {},
      open: false,
    });
  }

  saveChanges = () => {
    const errors = {};

    if (!this.state.firstName) {
      errors.firstName = 'FirstName is required!';
    }

    if (!this.state.lastName) {
      errors.lastName = 'LastName is required!';
    }

    const errorCount = Object.keys(errors).length;

    if (errorCount > 0) {
      this.setState({
        errors,
      });
    } else {
      this.closeModal();
    }
  }

  render() {
    const errorList = this.state.errors || {};

    return (
      <Fragment>
        <Button type="primary" onClick={this.onClick}>Launch Modal</Button>

        <Modal onReverseComplete={this.resetSet} open={this.state.open}>
          <ModalHeader onClose={this.closeModal} title="Sample Modal" titleSub="I'm a subtitle!" />
          <ModalBody>
            <form className="form">
              <Input label="First Name" name="firstName" initialValue={this.state.firstName} validationMessage={errorList.firstName} required onChange={this.handleChange} />
              <Input label="Last Name" name="lastName" initialValue={this.state.lastName} validationMessage={errorList.lastName} required onChange={this.handleChange} />
            </form>
          </ModalBody>
          <ModalFooter>
            <UtilityInlineGrid align="between">
              <Button type="default" onClick={this.closeModal}>Close</Button>
              <Button type="primary" onClick={this.saveChanges}>Save Changes</Button>
            </UtilityInlineGrid>
          </ModalFooter>
        </Modal>
      </Fragment>
    );
  }
}
